{"version":3,"file":"static/js/RestaurantReader.3fdbcf8b.chunk.js","mappings":"6QAIaA,EAAoBC,EAAAA,GAAAA,IAAH,oRAGX,qBAAGC,MAAkBC,MAAM,MAWjCC,EAAkBH,EAAAA,GAAAA,IAAH,2GAOfI,EAAeJ,EAAAA,GAAAA,IAAH,kHAIhB,qBAAGC,MAAkBC,MAAM,MAGvBG,GAAiBL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,uEAKdO,GAA8BP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,wCAC5B,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,MAAM,GAA9B,cAAsCD,EAAMC,MAAM,O,WCwB9D,MAzCA,YAQwC,IAPtCO,EAOqC,EAPrCA,SACAC,EAMqC,EANrCA,KACAC,EAKqC,EALrCA,QACAC,EAIqC,EAJrCA,MACAC,EAGqC,EAHrCA,SACAC,EAEqC,EAFrCA,QACAC,EACqC,EADrCA,KAEQC,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACE,UAAC,KAAD,YACE,SAACjB,EAAD,WACE,SAACI,EAAD,CAAiBe,IAAKT,EAAUU,IAAKT,EAAMU,QAAQ,YAGrD,UAAC,KAAD,YACE,UAAChB,EAAD,YACE,SAACC,EAAD,UAAiBK,KACjB,SAAC,EAAAW,EAAD,CAAeC,MAAON,EAAE,kBAAxB,SAA4CL,EAAQY,UAGtD,UAAChB,EAAD,YACE,yBACE,SAAC,MAAD,UAA0BK,OAE5B,yBACE,SAAC,MAAD,UAA4BC,OAE9B,yBACE,SAAC,MAAD,UAA2BC,UAI/B,SAAC,KAAD,CAAuBU,OAAQT,W,qBCtBvC,MAxBA,WACE,OACE,UAAC,KAAD,YACE,SAAChB,EAAD,WACE,SAACI,EAAD,CAAiBsB,GAAIC,EAAAA,OAGvB,UAAC,KAAD,YACE,SAACtB,EAAD,WACE,SAAC,IAAD,CAAUuB,MAAO,SAGnB,SAACpB,EAAD,WACE,yBACE,SAAC,IAAD,CAAUoB,MAAO,WAIrB,SAACC,EAAA,EAAD,WCZR,MAVA,YAAkF,IAAjDC,EAAgD,EAAhDA,IAC/B,OACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAOC,SAAS,QAAhB,SAAyBD,SCiBjC,MApBA,WACE,IAAQb,GAAMC,EAAAA,EAAAA,KAAND,EACR,GAAkCe,EAAAA,EAAAA,MAA1BC,GAAIC,OAAZ,MAA2B,GAA3B,EACA,GAAiDC,EAAAA,EAAAA,IAAqB,CAAEF,GAAIC,IAA9DE,EAAd,EAAQC,KAAkBC,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,QAErC,OAAID,GACK,SAAC,EAAD,IAGLF,GACK,SAAC,GAAD,UAAsBA,IAG3BG,GACK,SAAC,EAAD,CAAuBT,IAAKb,EAAE,wCAGhC,SAAC,EAAD,CAAuBa,IAAKb,EAAE","sources":["views/RestaurantReader/RestaurantReader.styles.ts","views/RestaurantReader/RestaurantReader.tsx","views/RestaurantReader/RestaurantReader.skeleton.tsx","views/RestaurantReader/RestaurantReader.error.tsx","views/RestaurantReader/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { H1 } from 'ui/typography';\nimport { InlineAnnotationsList } from 'ui/layout';\n\nexport const StyledHeroWrapper = styled.div`\n  position: relative;\n  height: 260px;\n  margin-bottom: ${({ theme }) => theme.space[6]};\n\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    inset: 0;\n    background: linear-gradient(0deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.12) 100%);\n  }\n`;\n\nexport const StyledHeroImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-position: center;\n  object-fit: cover;\n`;\n\nexport const StyledTopBar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: ${({ theme }) => theme.space[4]};\n`;\n\nexport const StyledHeadline = styled(H1)`\n  min-width: 0;\n  overflow-wrap: break-word;\n`;\n\nexport const StyledInlineAnnotationsList = styled(InlineAnnotationsList)`\n  margin: ${({ theme }) => `${theme.space[1]} 0 ${theme.space[8]}`};\n`;\n","import { useTranslation } from 'react-i18next';\nimport type { ApiRestaurantDataResponse } from 'types';\nimport { RestaurantDishesTable } from 'components';\nimport {\n  MainContent,\n  Container,\n  RestaurantDeliveryInfo,\n  RestaurantAddressInfo,\n  RestaurantOpenStatus,\n} from 'ui/layout';\nimport { IconAvgReview } from 'ui/icons';\nimport {\n  StyledHeroImage,\n  StyledHeroWrapper,\n  StyledTopBar,\n  StyledHeadline,\n  StyledInlineAnnotationsList,\n} from './RestaurantReader.styles';\n\ntype RestaurantReaderProps = ApiRestaurantDataResponse;\n\nfunction RestaurantReader({\n  coverImg,\n  name,\n  reviews,\n  opens,\n  delivery,\n  address,\n  menu,\n}: RestaurantReaderProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <MainContent>\n      <StyledHeroWrapper>\n        <StyledHeroImage src={coverImg} alt={name} loading=\"lazy\" />\n      </StyledHeroWrapper>\n\n      <Container>\n        <StyledTopBar>\n          <StyledHeadline>{name}</StyledHeadline>\n          <IconAvgReview title={t('Average review')}>{reviews.avg}</IconAvgReview>\n        </StyledTopBar>\n\n        <StyledInlineAnnotationsList>\n          <li>\n            <RestaurantOpenStatus {...opens} />\n          </li>\n          <li>\n            <RestaurantDeliveryInfo {...delivery} />\n          </li>\n          <li>\n            <RestaurantAddressInfo {...address} />\n          </li>\n        </StyledInlineAnnotationsList>\n\n        <RestaurantDishesTable dishes={menu} />\n      </Container>\n    </MainContent>\n  );\n}\n\nexport default RestaurantReader;\n","import Skeleton from 'react-loading-skeleton';\nimport { Container, MainContent } from 'ui/layout';\nimport { RestaurantDishesTableSkeleton } from 'components/RestaurantDishesTable';\nimport {\n  StyledHeroImage,\n  StyledHeroWrapper,\n  StyledInlineAnnotationsList,\n  StyledTopBar,\n} from './RestaurantReader.styles';\n\nfunction RestaurantReaderSkeleton(): JSX.Element {\n  return (\n    <MainContent>\n      <StyledHeroWrapper>\n        <StyledHeroImage as={Skeleton} />\n      </StyledHeroWrapper>\n\n      <Container>\n        <StyledTopBar>\n          <Skeleton width={280} />\n        </StyledTopBar>\n\n        <StyledInlineAnnotationsList>\n          <li>\n            <Skeleton width={200} />\n          </li>\n        </StyledInlineAnnotationsList>\n\n        <RestaurantDishesTableSkeleton />\n      </Container>\n    </MainContent>\n  );\n}\n\nexport default RestaurantReaderSkeleton;\n","import { Alert, Container, MainContent } from 'ui/layout';\n\ninterface RestaurantReaderErrorProps {\n  msg: string;\n}\n\nfunction RestaurantReaderError({ msg }: RestaurantReaderErrorProps): JSX.Element {\n  return (\n    <MainContent>\n      <Container>\n        <Alert severity=\"error\">{msg}</Alert>\n      </Container>\n    </MainContent>\n  );\n}\n\nexport default RestaurantReaderError;\n","import { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useGetRestaurantData } from 'hooks/api';\nimport RestaurantReader from './RestaurantReader';\nimport RestaurantReaderSkeleton from './RestaurantReader.skeleton';\nimport RestaurantReaderError from './RestaurantReader.error';\n\nfunction RestaurantReaderRenderer(): JSX.Element {\n  const { t } = useTranslation();\n  const { id: restaurantId = '' } = useParams();\n  const { data: restaurant, isLoading, isError } = useGetRestaurantData({ id: restaurantId });\n\n  if (isLoading) {\n    return <RestaurantReaderSkeleton />;\n  }\n\n  if (restaurant) {\n    return <RestaurantReader {...restaurant} />;\n  }\n\n  if (isError) {\n    return <RestaurantReaderError msg={t(\"Couldn't fetch restaurant data...\")} />;\n  }\n\n  return <RestaurantReaderError msg={t(\"Couldn't find restaurant...\")} />;\n}\n\nexport default RestaurantReaderRenderer;\n"],"names":["StyledHeroWrapper","styled","theme","space","StyledHeroImage","StyledTopBar","StyledHeadline","H1","StyledInlineAnnotationsList","InlineAnnotationsList","coverImg","name","reviews","opens","delivery","address","menu","t","useTranslation","src","alt","loading","I","title","avg","dishes","as","Skeleton","width","RestaurantDishesTable","msg","severity","useParams","id","restaurantId","useGetRestaurantData","restaurant","data","isLoading","isError"],"sourceRoot":""}